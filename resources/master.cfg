################################################################################
#
# GPGTools Buildbot config script.
#
# @author:  Alex
# @version: 2011-12-30
# @url:     http://build.gpgtools.org
#
################################################################################


################################################################################
# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
################################################################################


# PROJECT IDENTITY #############################################################
# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.
c['title'] = "GPGTools"
c['titleURL'] = "http://gpgtools.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.
bbPort="8811"
c['buildbotURL'] = "http://localhost:" + bbPort + "/"
################################################################################


# DB URL ########################################################################
# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
################################################################################


# STATUS TARGETS ###############################################################
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.
c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status.mail import MailNotifier

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = False, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=bbPort, authz=authz_cfg))
c['status'].append(MailNotifier(
    fromaddr="noreply@gpgtools.org",
    sendToInterestedUsers=True,
    extraRecipients=["alex@gpgtools.org"],
    subject="[GPGTools] Build failed",
    mode="failing"))
################################################################################


# BUILDSLAVES ##################################################################
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password. The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("gpgtools-slave", "pass", max_builds=20)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989
################################################################################


# CHANGESOURCES ################################################################
from buildbot.changes import pb
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of GPGTools.

c['change_source'] = [pb.PBChangeSource()]
################################################################################


# BUILDERS and SCHEDULERS ######################################################
# Configure the Schedulers, which decide how to react to incoming changes.
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []

# The 'builders' list defines the Builders, which tell Buildbot how to perform a
# build: what steps, and which slaves can execute them.  Note that any
# particular build will only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.config import BuilderConfig
from buildbot.changes.gitpoller import GitPoller

c['builders'] = []
builderNames = []

# ------------------------------------------------------------------------------
def add_check(factory):
    factory.addStep(Compile(command=["make", "check"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["validating"],
        descriptionDone=["validated"]))
    return factory

def add_test(factory):
    factory.addStep(Compile(command=["make", "test"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["testing"],
        descriptionDone=["tested"]))
    return factory

def add_update(factory):
    factory.addStep(Compile(command=["make", "update"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["updating deps"],
        descriptionDone=["updated deps"]))
    return factory

def add_compile(factory):
    factory.addStep(Compile(command=["make", "compile"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["compiling"],
        descriptionDone=["compiled"]))
    return factory

def add_htmltest(factory):
    factory.addStep(Compile(command=["make", "compile"],
        warningPattern="^.*Line ",
        description=["validating"],
        descriptionDone=["validated"]))
    return factory

def add_check_git(factory):
    factory.addStep(Compile(command=["cat", ".git/config"],
        warningPattern="^.*git@github",
        description=["checking git config"],
        descriptionDone=["git config checked"]))
    return factory

def add_deploy(factory):
    factory.addStep(ShellCommand(command=["make", "deploy"],
        description=["deploying"],
        descriptionDone=["deployed"]))
    return factory

def add_download(factory):
    factory.addStep(ShellCommand(command=["git", "pull", "origin", "master"],
        workdir="build/Dependencies/GPGTools_Core",
        description=["updating deps"],
        descriptionDone=["updated deps"]))
    factory.addStep(ShellCommand(command=["./Dependencies/GPGTools_Core/scripts/create_dmg.sh", "auto", "buildbot"],
        description=["creating installer"],
        descriptionDone=["installer available"]))
    factory.addStep(ShellCommand(command=["./Dependencies/GPGTools_Core/scripts/bb_deploy_dmg.sh", "/GPGTools/buildbot/gpgtools-master/public_html/download"],
        description=["preparing download"],
        descriptionDone=["download available"]))
    return factory

def setup_module(repository, branch):
    repourl='git://github.com/GPGTools/'+repository+'.git'
    reponame=repository+"-"+branch

    factory = BuildFactory()
    factory.addStep(Git(repourl=repourl, mode='clobber', branch=branch, submodules=True, shallow=True))
    
    #Workaround since buildbot does not recursively checkout our projects
    factory.addStep(Compile(command=["git", "submodule", "foreach", "git", "submodule", "update", "--init"],
        description=["workaround for buildbot"],
        descriptionDone=["workaround for buildbot"]))

    #add_update(factory)
    add_check_git(factory)
    add_compile(factory)

    c['builders'].append(BuilderConfig(
        name=reponame, slavenames=["gpgtools-slave"], factory=factory))
    c['change_source'].append(GitPoller
        (repourl, branch=branch, pollinterval=5*60, project=reponame,
        workdir="/tmp/"+reponame))
    c['schedulers'].append(SingleBranchScheduler(name=reponame,
                            change_filter=filter.ChangeFilter(project=reponame),
                            treeStableTimer=5*60,
                            builderNames=[reponame]))

    builderNames.append(reponame)
    return factory
# ------------------------------------------------------------------------------

# can be deployed --------------------------------------------------------------
# see add_deploy
add_download(add_check(setup_module("GPGKeychainAccess", "master")))
add_download(add_check(setup_module("GPGServices", "master")))
add_download(add_check(setup_module("GPGMail", "master")))
add_download(add_check(setup_module("GPGPreferences", "master")))
add_download(setup_module("GPGTools_Installer", "master"))
add_download(add_test(setup_module("MacGPG1", "master")))
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# to be merged into master
add_download(setup_module("MacGPG2", "homebrew"))
#setup_module("MacGPG2", "buildscript")
#setup_module("MacGPG2", "master")
# ------------------------------------------------------------------------------

# can not be deployed ----------------------------------------------------------
add_check(setup_module("Libmacgpg", "master"))
add_check(setup_module("pinentry-mac", "master"))
setup_module("GPGTools_Core", "master")
add_htmltest(setup_module("GPGTools_Homepage", "gh-pages"))
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
c['schedulers'].append(SingleBranchScheduler(name="everything",
                            change_filter=filter.ChangeFilter(project="all"),
                            treeStableTimer=None,
                            builderNames=builderNames))
# ------------------------------------------------------------------------------
################################################################################
