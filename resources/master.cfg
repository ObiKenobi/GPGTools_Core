# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### PROJECT IDENTITY
# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.
c['title'] = "GPGTools"
c['titleURL'] = "http://gpgtools.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.
c['buildbotURL'] = "http://localhost:8010/"

####### DB URL
# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

####### STATUS TARGETS
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))


###### BUILDSLAVES
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass", max_builds=20)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES
from buildbot.changes import pb
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of GPGTools.
#from buildbot.changes.gitpoller import GitPoller

c['change_source'] = pb.PBChangeSource()

#c['change_source'] = GitPoller(
#        'git://github.com/GPGTools/Libmacgpg.git',
#        workdir='gitpoller-workdir', branch='master',
#        pollinterval=300)


####### BUILDERS
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.config import BuilderConfig

c['builders'] = []
builderNames = []

def add_module(repository, branch):
    factory = BuildFactory()
    factory.addStep(Git(repourl='git://github.com/GPGTools/'+repository+'.git', mode='copy', branch=branch, submodules=True, shallow=True))
    factory.addStep(Compile(command=["make", "compile"], warningPattern="^[0-9]+ warning"))
    c['builders'].append(BuilderConfig(name=repository+"-"+branch, slavenames=["example-slave"], factory=factory))
    builderNames.append(repository+"-"+branch)
    return factory

add_module("Libmacgpg", "master")
add_module("Libmacgpg", "lion")
add_module("GPGKeychainAccess", "master")
add_module("GPGKeychainAccess", "Libmacgpg")
add_module("GPGTools_Preferences", "master")
add_module("GPGServices", "master")
add_module("GPGServices", "libmacgpg")
add_module("GPGMail", "master")
add_module("GPGMail", "lion")
add_module("MacGPG1", "master")
add_module("MacGPG2", "master")



####### SCHEDULERS
# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'libmacgpg' build
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(),
                            treeStableTimer=None,
                            builderNames=builderNames))
